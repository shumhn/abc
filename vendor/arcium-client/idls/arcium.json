{
  "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6",
  "metadata": {
    "name": "arcium",
    "version": "0.3.0",
    "spec": "0.1.0",
    "description": "The Arcium program"
  },
  "instructions": [
    {
      "name": "activate_arx",
      "discriminator": [
        15,
        203,
        48,
        186,
        243,
        85,
        60,
        115
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "arx_node_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  65,
                  114,
                  120,
                  78,
                  111,
                  100,
                  101
                ]
              },
              {
                "kind": "arg",
                "path": "_node_offset"
              }
            ]
          }
        },
        {
          "name": "clock",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  111,
                  99,
                  107,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "node_offset",
          "type": "u32"
        }
      ]
    },
    {
      "name": "activate_cluster",
      "discriminator": [
        228,
        170,
        10,
        172,
        246,
        96,
        63,
        154
      ],
      "accounts": [
        {
          "name": "authority",
          "writable": true,
          "signer": true
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "_id"
              }
            ]
          }
        },
        {
          "name": "clock",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  111,
                  99,
                  107,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "cluster_id",
          "type": "u32"
        }
      ]
    },
    {
      "name": "bump_epoch_cluster",
      "discriminator": [
        172,
        203,
        90,
        207,
        128,
        221,
        229,
        246
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "_cluster_offset"
              }
            ]
          }
        },
        {
          "name": "clock",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  111,
                  99,
                  107,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "cluster_offset",
          "type": "u32"
        }
      ]
    },
    {
      "name": "callback_computation",
      "discriminator": [
        11,
        224,
        42,
        236,
        0,
        154,
        74,
        163
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "node",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  65,
                  114,
                  120,
                  78,
                  111,
                  100,
                  101
                ]
              },
              {
                "kind": "arg",
                "path": "node_offset"
              }
            ]
          }
        },
        {
          "name": "mxe",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  88,
                  69,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "mxe.cluster.ok_or(ArciumError :: ClusterNotSet) ? ",
                "account": "MXEAccount"
              }
            ]
          }
        },
        {
          "name": "comp",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              },
              {
                "kind": "arg",
                "path": "comp_offset"
              }
            ]
          }
        },
        {
          "name": "mempool",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  101,
                  109,
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "executing_pool",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  69,
                  120,
                  101,
                  99,
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "comp_def_acc",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  68,
                  101,
                  102,
                  105,
                  110,
                  105,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              },
              {
                "kind": "arg",
                "path": "_comp_def_offset"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "instructions_sysvar",
          "address": "Sysvar1nstructions1111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "comp_offset",
          "type": "u64"
        },
        {
          "name": "node_offset",
          "type": "u32"
        },
        {
          "name": "comp_def_offset",
          "type": "u32"
        },
        {
          "name": "mxe_program",
          "type": "pubkey"
        },
        {
          "name": "execution_status",
          "type": {
            "defined": {
              "name": "ExecutionStatus"
            }
          }
        }
      ]
    },
    {
      "name": "deactivate_arx",
      "discriminator": [
        117,
        244,
        137,
        148,
        25,
        190,
        175,
        164
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "arx_node_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  65,
                  114,
                  120,
                  78,
                  111,
                  100,
                  101
                ]
              },
              {
                "kind": "arg",
                "path": "_node_offset"
              }
            ]
          }
        },
        {
          "name": "clock",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  111,
                  99,
                  107,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "cluster_acc_0",
          "optional": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "arx_node_acc.cluster_memberships",
                "account": "ArxNode"
              }
            ]
          }
        },
        {
          "name": "cluster_acc_1",
          "optional": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "arx_node_acc.cluster_memberships.get(1).ok_or(ArciumError ::\nInvalidClusterMembership) ? ",
                "account": "ArxNode"
              }
            ]
          }
        },
        {
          "name": "cluster_acc_2",
          "optional": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "arx_node_acc.cluster_memberships.get(2).ok_or(ArciumError ::\nInvalidClusterMembership) ? ",
                "account": "ArxNode"
              }
            ]
          }
        },
        {
          "name": "cluster_acc_3",
          "optional": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "arx_node_acc.cluster_memberships.get(3).ok_or(ArciumError ::\nInvalidClusterMembership) ? ",
                "account": "ArxNode"
              }
            ]
          }
        },
        {
          "name": "cluster_acc_4",
          "optional": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "arx_node_acc.cluster_memberships.get(4).ok_or(ArciumError ::\nInvalidClusterMembership) ? ",
                "account": "ArxNode"
              }
            ]
          }
        },
        {
          "name": "cluster_acc_5",
          "optional": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "arx_node_acc.cluster_memberships.get(5).ok_or(ArciumError ::\nInvalidClusterMembership) ? ",
                "account": "ArxNode"
              }
            ]
          }
        },
        {
          "name": "cluster_acc_6",
          "optional": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "arx_node_acc.cluster_memberships.get(6).ok_or(ArciumError ::\nInvalidClusterMembership) ? ",
                "account": "ArxNode"
              }
            ]
          }
        },
        {
          "name": "cluster_acc_7",
          "optional": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "arx_node_acc.cluster_memberships.get(7).ok_or(ArciumError ::\nInvalidClusterMembership) ? ",
                "account": "ArxNode"
              }
            ]
          }
        },
        {
          "name": "cluster_acc_8",
          "optional": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "arx_node_acc.cluster_memberships.get(8).ok_or(ArciumError ::\nInvalidClusterMembership) ? ",
                "account": "ArxNode"
              }
            ]
          }
        },
        {
          "name": "cluster_acc_9",
          "optional": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "arx_node_acc.cluster_memberships.get(9).ok_or(ArciumError ::\nInvalidClusterMembership) ? ",
                "account": "ArxNode"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "node_offset",
          "type": "u32"
        }
      ]
    },
    {
      "name": "deactivate_cluster",
      "discriminator": [
        13,
        42,
        182,
        159,
        184,
        10,
        212,
        178
      ],
      "accounts": [
        {
          "name": "authority",
          "writable": true,
          "signer": true
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "_id"
              }
            ]
          }
        },
        {
          "name": "clock",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  111,
                  99,
                  107,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "cluster_id",
          "type": "u32"
        },
        {
          "name": "deactivation_epoch",
          "type": {
            "defined": {
              "name": "Epoch"
            }
          }
        }
      ]
    },
    {
      "name": "dummy_instruction",
      "docs": [
        "Only present so the mempool and execpool accounts are actually included in the idl, since we",
        "don't explicitly declare them in the accounts section of the other instructions."
      ],
      "discriminator": [
        57,
        4,
        200,
        151,
        58,
        19,
        120,
        9
      ],
      "accounts": [
        {
          "name": "tiny_mempool"
        },
        {
          "name": "tiny_execpool"
        },
        {
          "name": "small_mempool"
        },
        {
          "name": "small_execpool"
        },
        {
          "name": "medium_mempool"
        },
        {
          "name": "medium_execpool"
        },
        {
          "name": "large_mempool"
        },
        {
          "name": "large_execpool"
        }
      ],
      "args": []
    },
    {
      "name": "embiggen_raw_circuit_acc",
      "discriminator": [
        92,
        195,
        192,
        21,
        193,
        242,
        135,
        194
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "comp_def_acc",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  68,
                  101,
                  102,
                  105,
                  110,
                  105,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              },
              {
                "kind": "arg",
                "path": "_comp_offset"
              }
            ]
          }
        },
        {
          "name": "comp_def_raw",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  68,
                  101,
                  102,
                  105,
                  110,
                  105,
                  116,
                  105,
                  111,
                  110,
                  82,
                  97,
                  119
                ]
              },
              {
                "kind": "account",
                "path": "comp_def_acc"
              },
              {
                "kind": "arg",
                "path": "_raw_circuit_index"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "comp_offset",
          "type": "u32"
        },
        {
          "name": "mxe_program",
          "type": "pubkey"
        },
        {
          "name": "raw_circuit_index",
          "type": "u8"
        }
      ]
    },
    {
      "name": "finalize_computation",
      "discriminator": [
        43,
        29,
        152,
        92,
        241,
        179,
        193,
        210
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "comp",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              },
              {
                "kind": "arg",
                "path": "comp_offset"
              }
            ]
          }
        },
        {
          "name": "mxe",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  88,
                  69,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "mxe.cluster.ok_or(ArciumError :: ClusterNotSet) ? ",
                "account": "MXEAccount"
              }
            ]
          }
        },
        {
          "name": "executing_pool",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  69,
                  120,
                  101,
                  99,
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "mempool",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  101,
                  109,
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "comp_def_acc",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  68,
                  101,
                  102,
                  105,
                  110,
                  105,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              },
              {
                "kind": "arg",
                "path": "_comp_def_offset"
              }
            ]
          }
        },
        {
          "name": "clock",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  111,
                  99,
                  107,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "comp_offset",
          "type": "u64"
        },
        {
          "name": "comp_def_offset",
          "type": "u32"
        },
        {
          "name": "mxe_program",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "finalize_computation_definition",
      "discriminator": [
        174,
        66,
        159,
        51,
        199,
        243,
        219,
        38
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "comp_def_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  68,
                  101,
                  102,
                  105,
                  110,
                  105,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              },
              {
                "kind": "arg",
                "path": "_comp_offset"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "comp_offset",
          "type": "u32"
        },
        {
          "name": "mxe_program",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "finalize_mxe_keys",
      "discriminator": [
        108,
        137,
        125,
        95,
        202,
        237,
        190,
        158
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "mxe",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  88,
                  69,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "cluster",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "mxe.cluster.ok_or(ArciumError :: ClusterNotSet) ? ",
                "account": "MXEAccount"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "_mxe_program",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "increase_mempool_size",
      "discriminator": [
        19,
        165,
        166,
        25,
        174,
        122,
        166,
        250
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "mempool",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  101,
                  109,
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "mxe_program"
              }
            ]
          }
        },
        {
          "name": "mxe_program"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": []
    },
    {
      "name": "init",
      "discriminator": [
        220,
        59,
        207,
        236,
        108,
        250,
        47,
        100
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "clock",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  111,
                  99,
                  107,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "fee_pool",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  70,
                  101,
                  101,
                  80,
                  111,
                  111,
                  108
                ]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "start_epoch_timestamp",
          "type": {
            "defined": {
              "name": "Timestamp"
            }
          }
        }
      ]
    },
    {
      "name": "init_arx_node",
      "discriminator": [
        55,
        177,
        212,
        125,
        72,
        118,
        148,
        232
      ],
      "accounts": [
        {
          "name": "operator_signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "operator_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  79,
                  112,
                  101,
                  114,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "operator_signer"
              }
            ]
          }
        },
        {
          "name": "arx_node_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  65,
                  114,
                  120,
                  78,
                  111,
                  100,
                  101
                ]
              },
              {
                "kind": "arg",
                "path": "node_offset"
              }
            ]
          }
        },
        {
          "name": "clock",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  111,
                  99,
                  107,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "node_offset",
          "type": "u32"
        },
        {
          "name": "config",
          "type": {
            "defined": {
              "name": "ArxNodeConfig"
            }
          }
        },
        {
          "name": "cu_capacity_claim",
          "type": "u64"
        },
        {
          "name": "metadata",
          "type": {
            "defined": {
              "name": "NodeMetadata"
            }
          }
        }
      ]
    },
    {
      "name": "init_cluster",
      "discriminator": [
        144,
        230,
        5,
        18,
        93,
        71,
        133,
        187
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "_id"
              }
            ]
          }
        },
        {
          "name": "authority"
        },
        {
          "name": "pool_account",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  70,
                  101,
                  101,
                  80,
                  111,
                  111,
                  108
                ]
              }
            ]
          }
        },
        {
          "name": "clock",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  111,
                  99,
                  107,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "cluster_id",
          "type": "u32"
        },
        {
          "name": "max_size",
          "type": "u32"
        },
        {
          "name": "cu_price",
          "type": "u64"
        }
      ]
    },
    {
      "name": "init_computation_definition",
      "docs": [
        "Initializes a computation definition."
      ],
      "discriminator": [
        45,
        185,
        155,
        17,
        97,
        77,
        230,
        73
      ],
      "accounts": [
        {
          "name": "signer",
          "docs": [
            "Signer of the transaction."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "mxe",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  88,
                  69,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "comp_def_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  68,
                  101,
                  102,
                  105,
                  110,
                  105,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              },
              {
                "kind": "arg",
                "path": "comp_offset"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "docs": [
            "System program account."
          ],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "comp_offset",
          "type": "u32"
        },
        {
          "name": "mxe_program",
          "type": "pubkey"
        },
        {
          "name": "computation_definition",
          "type": {
            "defined": {
              "name": "ComputationDefinitionMeta"
            }
          }
        },
        {
          "name": "circuit_source_override",
          "type": {
            "option": {
              "defined": {
                "name": "CircuitSource"
              }
            }
          }
        },
        {
          "name": "cu_amount",
          "type": "u64"
        },
        {
          "name": "finalization_authority",
          "type": {
            "option": "pubkey"
          }
        },
        {
          "name": "finalize_during_callback",
          "type": "bool"
        }
      ]
    },
    {
      "name": "init_mxe",
      "docs": [
        "Initializes a MPC Execution Environment."
      ],
      "discriminator": [
        240,
        227,
        11,
        166,
        193,
        167,
        25,
        79
      ],
      "accounts": [
        {
          "name": "signer",
          "docs": [
            "Signer of the transaction."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "mxe",
          "docs": [
            "MXE account to initialize."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  88,
                  69,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "mxe_program"
              }
            ]
          }
        },
        {
          "name": "mempool",
          "docs": [
            "function"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  101,
                  109,
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "mxe_program"
              }
            ]
          }
        },
        {
          "name": "execpool",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  69,
                  120,
                  101,
                  99,
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "mxe_program"
              }
            ]
          }
        },
        {
          "name": "cluster",
          "docs": [
            "Cluster to add to the MXE."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "cluster_offset"
              }
            ]
          }
        },
        {
          "name": "mxe_keygen_computation_definition",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  68,
                  101,
                  102,
                  105,
                  110,
                  105,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "mxe_program"
              },
              {
                "kind": "const",
                "value": [
                  1,
                  0,
                  0,
                  0
                ]
              }
            ]
          }
        },
        {
          "name": "mxe_keygen_computation",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "mxe_program"
              },
              {
                "kind": "const",
                "value": [
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ]
              }
            ]
          }
        },
        {
          "name": "mxe_authority",
          "optional": true
        },
        {
          "name": "mxe_program",
          "docs": [
            "constraint in tests because setting it would require us to deploy a program each time."
          ]
        },
        {
          "name": "system_program",
          "docs": [
            "System program account."
          ],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "cluster_offset",
          "type": "u32"
        },
        {
          "name": "mempool_size",
          "type": {
            "defined": {
              "name": "MempoolSize"
            }
          }
        }
      ]
    },
    {
      "name": "init_operator",
      "discriminator": [
        132,
        210,
        12,
        91,
        159,
        94,
        35,
        54
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "operator_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  79,
                  112,
                  101,
                  114,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "signer"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "meta",
          "type": {
            "defined": {
              "name": "OperatorMeta"
            }
          }
        }
      ]
    },
    {
      "name": "init_raw_circuit_acc",
      "discriminator": [
        16,
        228,
        193,
        228,
        93,
        231,
        58,
        4
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "comp_def_acc",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  68,
                  101,
                  102,
                  105,
                  110,
                  105,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              },
              {
                "kind": "arg",
                "path": "_comp_offset"
              }
            ]
          }
        },
        {
          "name": "comp_def_raw",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  68,
                  101,
                  102,
                  105,
                  110,
                  105,
                  116,
                  105,
                  111,
                  110,
                  82,
                  97,
                  119
                ]
              },
              {
                "kind": "account",
                "path": "comp_def_acc"
              },
              {
                "kind": "arg",
                "path": "_raw_circuit_index"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "comp_offset",
          "type": "u32"
        },
        {
          "name": "mxe_program",
          "type": "pubkey"
        },
        {
          "name": "raw_circuit_index",
          "type": "u8"
        }
      ]
    },
    {
      "name": "join_cluster",
      "discriminator": [
        150,
        167,
        124,
        239,
        108,
        128,
        31,
        162
      ],
      "accounts": [
        {
          "name": "node_authority",
          "writable": true,
          "signer": true
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "cluster_offset"
              }
            ]
          }
        },
        {
          "name": "arx_node_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  65,
                  114,
                  120,
                  78,
                  111,
                  100,
                  101
                ]
              },
              {
                "kind": "arg",
                "path": "node_offset"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "cluster_id",
          "type": "u32"
        },
        {
          "name": "node_bump",
          "type": "u32"
        },
        {
          "name": "join",
          "type": "bool"
        }
      ]
    },
    {
      "name": "leave_mxe",
      "discriminator": [
        225,
        222,
        68,
        9,
        96,
        160,
        126,
        211
      ],
      "accounts": [
        {
          "name": "authority",
          "writable": true,
          "signer": true
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "_id"
              }
            ]
          }
        },
        {
          "name": "mxe",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  88,
                  69,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "cluster_offset",
          "type": "u32"
        },
        {
          "name": "mxe_program",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "propose_fee",
      "discriminator": [
        103,
        204,
        172,
        134,
        248,
        252,
        27,
        170
      ],
      "accounts": [
        {
          "name": "node_authority",
          "writable": true,
          "signer": true
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "_cluster_offset"
              }
            ]
          }
        },
        {
          "name": "arx_node_acc",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  65,
                  114,
                  120,
                  78,
                  111,
                  100,
                  101
                ]
              },
              {
                "kind": "arg",
                "path": "node_offset"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "cluster_offset",
          "type": "u32"
        },
        {
          "name": "node_offset",
          "type": "u32"
        },
        {
          "name": "proposed_fee",
          "type": "u64"
        }
      ]
    },
    {
      "name": "propose_join_cluster",
      "discriminator": [
        148,
        228,
        222,
        211,
        161,
        128,
        118,
        175
      ],
      "accounts": [
        {
          "name": "cluster_authority",
          "writable": true,
          "signer": true
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "cluster_offset"
              }
            ]
          }
        },
        {
          "name": "arx_node_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  65,
                  114,
                  120,
                  78,
                  111,
                  100,
                  101
                ]
              },
              {
                "kind": "arg",
                "path": "node_offset"
              }
            ]
          }
        },
        {
          "name": "clock",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  111,
                  99,
                  107,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "cluster_id",
          "type": "u32"
        },
        {
          "name": "node_bump",
          "type": "u32"
        }
      ]
    },
    {
      "name": "queue_computation",
      "docs": [
        "Queues a computation.",
        "cu_price_micro: The priority price of a CU, in thousandths of a $ARX. Used",
        "to calculate the priority fee and rounded down."
      ],
      "discriminator": [
        1,
        149,
        103,
        13,
        102,
        227,
        93,
        164
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "sign_seed",
          "docs": [
            "This is ok-ish though, as we're not reading the account, we just need it to check that the",
            "CPI invocation is valid. The only downside is it's a bit ugly and wastes some CUs since",
            "we can't use a potentially stored bump."
          ],
          "signer": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  83,
                  105,
                  103,
                  110,
                  101,
                  114,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ],
            "program": {
              "kind": "arg",
              "path": "_mxe_program"
            }
          }
        },
        {
          "name": "comp",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              },
              {
                "kind": "arg",
                "path": "computation_offset"
              }
            ]
          }
        },
        {
          "name": "mxe",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  88,
                  69,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "executing_pool",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  69,
                  120,
                  101,
                  99,
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "mempool",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  101,
                  109,
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "comp_def_acc",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  68,
                  101,
                  102,
                  105,
                  110,
                  105,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              },
              {
                "kind": "arg",
                "path": "computation_definition_offset"
              }
            ]
          }
        },
        {
          "name": "cluster",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "cluster_index.map_or(mxe.cluster.ok_or(ArciumError :: ClusterNotSet) ? , | i |\nmxe.fallback_clusters [i as usize])"
              }
            ]
          }
        },
        {
          "name": "pool_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  70,
                  101,
                  101,
                  80,
                  111,
                  111,
                  108
                ]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "clock",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  111,
                  99,
                  107,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "comp_offset",
          "type": "u64"
        },
        {
          "name": "computation_definition_offset",
          "type": "u32"
        },
        {
          "name": "cluster_index",
          "type": {
            "option": "u16"
          }
        },
        {
          "name": "args",
          "type": {
            "vec": {
              "defined": {
                "name": "Argument"
              }
            }
          }
        },
        {
          "name": "mxe_program",
          "type": "pubkey"
        },
        {
          "name": "callback_url",
          "type": {
            "option": "string"
          }
        },
        {
          "name": "custom_callback_instructions",
          "type": {
            "vec": {
              "defined": {
                "name": "CallbackInstruction"
              }
            }
          }
        },
        {
          "name": "input_delivery_fee",
          "type": "u64"
        },
        {
          "name": "output_delivery_fee",
          "type": "u64"
        },
        {
          "name": "cu_price_micro",
          "type": "u64"
        }
      ]
    },
    {
      "name": "set_arx_node_config",
      "discriminator": [
        163,
        75,
        176,
        148,
        145,
        196,
        238,
        234
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "arx_node_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  65,
                  114,
                  120,
                  78,
                  111,
                  100,
                  101
                ]
              },
              {
                "kind": "arg",
                "path": "_node_offset"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "node_offset",
          "type": "u32"
        },
        {
          "name": "config",
          "type": {
            "defined": {
              "name": "ArxNodeConfig"
            }
          }
        }
      ]
    },
    {
      "name": "set_arx_node_metadata",
      "discriminator": [
        176,
        88,
        44,
        90,
        127,
        151,
        62,
        80
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "arx_node_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  65,
                  114,
                  120,
                  78,
                  111,
                  100,
                  101
                ]
              },
              {
                "kind": "arg",
                "path": "_node_offset"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "node_offset",
          "type": "u32"
        },
        {
          "name": "meta",
          "type": {
            "defined": {
              "name": "NodeMetadata"
            }
          }
        }
      ]
    },
    {
      "name": "set_cluster",
      "discriminator": [
        140,
        96,
        38,
        83,
        225,
        128,
        25,
        176
      ],
      "accounts": [
        {
          "name": "signer",
          "docs": [
            "Signer of the transaction."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "mxe",
          "docs": [
            "MXE account to set the cluster for."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  88,
                  69,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "mxe_program"
              }
            ]
          }
        },
        {
          "name": "cluster",
          "docs": [
            "Cluster to set for the MXE."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "cluster_offset"
              }
            ]
          }
        },
        {
          "name": "mxe_program"
        },
        {
          "name": "system_program",
          "docs": [
            "System program account."
          ],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "cluster_offset",
          "type": "u32"
        }
      ]
    },
    {
      "name": "set_cluster_authority",
      "discriminator": [
        94,
        172,
        32,
        75,
        38,
        40,
        31,
        106
      ],
      "accounts": [
        {
          "name": "current_authority",
          "writable": true,
          "signer": true
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "_id"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "cluster_id",
          "type": "u32"
        },
        {
          "name": "new_authority",
          "type": {
            "option": "pubkey"
          }
        }
      ]
    },
    {
      "name": "set_mxe_keys",
      "discriminator": [
        156,
        205,
        125,
        215,
        134,
        88,
        62,
        144
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "node",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  65,
                  114,
                  120,
                  78,
                  111,
                  100,
                  101
                ]
              },
              {
                "kind": "arg",
                "path": "node_offset"
              }
            ]
          }
        },
        {
          "name": "mxe",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  77,
                  88,
                  69,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              }
            ]
          }
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "mxe.cluster.ok_or(ArciumError :: ClusterNotSet) ? ",
                "account": "MXEAccount"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "node_offset",
          "type": "u32"
        },
        {
          "name": "_mxe_program",
          "type": "pubkey"
        },
        {
          "name": "mxe_x25519_pubkey",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        }
      ]
    },
    {
      "name": "update_current_epoch_idempotent",
      "discriminator": [
        47,
        73,
        68,
        127,
        116,
        74,
        89,
        62
      ],
      "accounts": [
        {
          "name": "clock",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  111,
                  99,
                  107,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        }
      ],
      "args": []
    },
    {
      "name": "upload_circuit",
      "discriminator": [
        86,
        238,
        214,
        111,
        30,
        23,
        168,
        100
      ],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "comp_def_acc",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  68,
                  101,
                  102,
                  105,
                  110,
                  105,
                  116,
                  105,
                  111,
                  110,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "_mxe_program"
              },
              {
                "kind": "arg",
                "path": "_comp_offset"
              }
            ]
          }
        },
        {
          "name": "comp_def_raw",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  111,
                  109,
                  112,
                  117,
                  116,
                  97,
                  116,
                  105,
                  111,
                  110,
                  68,
                  101,
                  102,
                  105,
                  110,
                  105,
                  116,
                  105,
                  111,
                  110,
                  82,
                  97,
                  119
                ]
              },
              {
                "kind": "account",
                "path": "comp_def_acc"
              },
              {
                "kind": "arg",
                "path": "raw_circuit_index"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "comp_offset",
          "type": "u32"
        },
        {
          "name": "mxe_program",
          "type": "pubkey"
        },
        {
          "name": "raw_circuit_index",
          "type": "u8"
        },
        {
          "name": "upload_data",
          "type": {
            "array": [
              "u8",
              814
            ]
          }
        },
        {
          "name": "offset",
          "type": "u32"
        }
      ]
    },
    {
      "name": "vote_fee",
      "discriminator": [
        39,
        118,
        79,
        185,
        118,
        12,
        71,
        84
      ],
      "accounts": [
        {
          "name": "node_authority",
          "writable": true,
          "signer": true
        },
        {
          "name": "cluster_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67,
                  108,
                  117,
                  115,
                  116,
                  101,
                  114
                ]
              },
              {
                "kind": "arg",
                "path": "_cluster_offset"
              }
            ]
          }
        },
        {
          "name": "arx_node_acc",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  65,
                  114,
                  120,
                  78,
                  111,
                  100,
                  101
                ]
              },
              {
                "kind": "arg",
                "path": "node_offset"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "cluster_offset",
          "type": "u32"
        },
        {
          "name": "node_offset",
          "type": "u32"
        },
        {
          "name": "fee_vote",
          "type": "u64"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "ArxNode",
      "discriminator": [
        2,
        207,
        122,
        223,
        93,
        97,
        231,
        199
      ]
    },
    {
      "name": "ClockAccount",
      "discriminator": [
        152,
        171,
        158,
        195,
        75,
        61,
        51,
        8
      ]
    },
    {
      "name": "Cluster",
      "discriminator": [
        236,
        225,
        118,
        228,
        173,
        106,
        18,
        60
      ]
    },
    {
      "name": "ComputationAccount",
      "discriminator": [
        136,
        34,
        167,
        71,
        41,
        174,
        103,
        77
      ]
    },
    {
      "name": "ComputationDefinitionAccount",
      "discriminator": [
        245,
        176,
        217,
        221,
        253,
        104,
        172,
        200
      ]
    },
    {
      "name": "ComputationDefinitionRaw",
      "discriminator": [
        226,
        70,
        57,
        224,
        38,
        233,
        59,
        136
      ]
    },
    {
      "name": "FeePool",
      "discriminator": [
        172,
        38,
        77,
        146,
        148,
        5,
        51,
        242
      ]
    },
    {
      "name": "LargeExecPool",
      "discriminator": [
        147,
        145,
        148,
        170,
        30,
        13,
        43,
        216
      ]
    },
    {
      "name": "LargeMempool",
      "discriminator": [
        16,
        168,
        90,
        235,
        249,
        207,
        73,
        223
      ]
    },
    {
      "name": "MXEAccount",
      "discriminator": [
        103,
        26,
        85,
        250,
        179,
        159,
        17,
        117
      ]
    },
    {
      "name": "MediumExecPool",
      "discriminator": [
        97,
        117,
        128,
        202,
        213,
        76,
        5,
        163
      ]
    },
    {
      "name": "MediumMempool",
      "discriminator": [
        10,
        249,
        58,
        39,
        255,
        231,
        199,
        168
      ]
    },
    {
      "name": "Operator",
      "discriminator": [
        219,
        31,
        188,
        145,
        69,
        139,
        204,
        117
      ]
    },
    {
      "name": "SmallExecPool",
      "discriminator": [
        37,
        147,
        249,
        253,
        217,
        136,
        3,
        87
      ]
    },
    {
      "name": "SmallMempool",
      "discriminator": [
        123,
        153,
        151,
        118,
        126,
        71,
        73,
        92
      ]
    },
    {
      "name": "TinyExecPool",
      "discriminator": [
        80,
        245,
        5,
        90,
        154,
        189,
        190,
        172
      ]
    },
    {
      "name": "TinyMempool",
      "discriminator": [
        176,
        33,
        67,
        108,
        73,
        135,
        110,
        166
      ]
    }
  ],
  "events": [
    {
      "name": "CallbackComputationEvent",
      "discriminator": [
        155,
        213,
        238,
        159,
        240,
        76,
        167,
        19
      ]
    },
    {
      "name": "FinalizeComputationEvent",
      "discriminator": [
        27,
        75,
        117,
        221,
        191,
        213,
        253,
        249
      ]
    },
    {
      "name": "InitComputationEvent",
      "discriminator": [
        17,
        51,
        124,
        226,
        70,
        97,
        58,
        186
      ]
    },
    {
      "name": "QueueComputationEvent",
      "discriminator": [
        118,
        53,
        33,
        169,
        32,
        14,
        197,
        147
      ]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "InvalidAuthority",
      "msg": "The given authority is invalid"
    },
    {
      "code": 6001,
      "name": "MxeKeysAlreadySet",
      "msg": "The MXE keys are already set, i.e. all the nodes of the MXE cluster already agreed on the MXE keys"
    },
    {
      "code": 6002,
      "name": "MxeKeysNotSet",
      "msg": "The MXE keys are not set, i.e. not all the nodes of the MXE cluster agreed on the MXE keys"
    },
    {
      "code": 6003,
      "name": "InvalidMXE",
      "msg": "An invalid MXE account has been supplied"
    },
    {
      "code": 6004,
      "name": "ClusterAlreadySet",
      "msg": "The cluster is already set"
    },
    {
      "code": 6005,
      "name": "ClusterNotSet",
      "msg": "The cluster is not set"
    },
    {
      "code": 6006,
      "name": "InvalidCluster",
      "msg": "An invalid cluster account has been supplied"
    },
    {
      "code": 6007,
      "name": "InvalidComputationDefinition",
      "msg": "An invalid computation definition account has been supplied"
    },
    {
      "code": 6008,
      "name": "CantFindMempoolID",
      "msg": "Couldn't find a mempool ID for the computation"
    },
    {
      "code": 6100,
      "name": "InvalidMempoolDiscriminator",
      "msg": "Mempool discriminator is invalid"
    },
    {
      "code": 6101,
      "name": "InvalidMempoolSize",
      "msg": "Mempool size is invalid"
    },
    {
      "code": 6102,
      "name": "InvalidExecpoolDiscriminator",
      "msg": "Execpool discriminator is invalid"
    },
    {
      "code": 6103,
      "name": "MaxParallelismReached",
      "msg": "Max parallelism reached"
    },
    {
      "code": 6200,
      "name": "InvalidComputationOffset",
      "msg": "Computation offset is invalid"
    },
    {
      "code": 6201,
      "name": "InvalidCallbackAccs",
      "msg": "Callback accounts are invalid"
    },
    {
      "code": 6202,
      "name": "InvalidCallbackAccsLen",
      "msg": "Callback accounts length is invalid"
    },
    {
      "code": 6203,
      "name": "AlreadyInitializedComputation",
      "msg": "The computation is already initialized"
    },
    {
      "code": 6204,
      "name": "AlreadyCallbackedComputation",
      "msg": "Callback computation already called"
    },
    {
      "code": 6205,
      "name": "InvalidFinalizeTx",
      "msg": "Finalize tx is invalid"
    },
    {
      "code": 6206,
      "name": "InvalidComputationStatus",
      "msg": "Computation status is invalid"
    },
    {
      "code": 6207,
      "name": "InvalidComputation",
      "msg": "Computation is invalid"
    },
    {
      "code": 6208,
      "name": "InvalidComputationAuthority",
      "msg": "Computation authority is invalid"
    },
    {
      "code": 6209,
      "name": "InvalidCallbackInstructions",
      "msg": "Callback instructions are invalid"
    },
    {
      "code": 6300,
      "name": "ComputationDefinitionNotCompleted",
      "msg": "Computation definition is not completed"
    },
    {
      "code": 6301,
      "name": "InvalidArguments",
      "msg": "Arguments supplied are invalid"
    },
    {
      "code": 6302,
      "name": "InvalidCircuitSource",
      "msg": "Circuit source is invalid"
    },
    {
      "code": 6303,
      "name": "ComputationDefinitionAlreadyCompleted",
      "msg": "Computation definition already completed"
    },
    {
      "code": 6400,
      "name": "InvalidNode",
      "msg": "Node is invalid"
    },
    {
      "code": 6401,
      "name": "MaxClusterMembershipReached",
      "msg": "Maximum number of nodes in the cluster has been reached"
    },
    {
      "code": 6402,
      "name": "NodeAlreadyExists",
      "msg": "The node already exists in the cluster"
    },
    {
      "code": 6403,
      "name": "InvalidNodeAuthority",
      "msg": "Node authority is invalid"
    },
    {
      "code": 6404,
      "name": "NodeNotInactive",
      "msg": "Node is not inactive"
    },
    {
      "code": 6405,
      "name": "NodeNotActive",
      "msg": "Node is not active"
    },
    {
      "code": 6406,
      "name": "InvalidClusterMembership",
      "msg": "Cluster membership is invalid"
    },
    {
      "code": 6407,
      "name": "NodeInActiveCluster",
      "msg": "Node is in an active cluster"
    },
    {
      "code": 6408,
      "name": "InvalidNodeConfig",
      "msg": "Node config is invalid"
    },
    {
      "code": 6500,
      "name": "ClusterFull",
      "msg": "Cluster is full"
    },
    {
      "code": 6501,
      "name": "InvalidDeactivationEpoch",
      "msg": "Cluster deactivation epoch is invalid"
    },
    {
      "code": 6502,
      "name": "InvalidMaxSize",
      "msg": "Cluster maximum size is invalid"
    },
    {
      "code": 6503,
      "name": "InvalidClusterAuthority",
      "msg": "Cluster authority is invalid"
    },
    {
      "code": 6504,
      "name": "InvalidFeeProposal",
      "msg": "Cluster fee proposal is invalid"
    },
    {
      "code": 6505,
      "name": "InvalidClusterState",
      "msg": "Cluster state is invalid"
    },
    {
      "code": 6506,
      "name": "InvalidVote",
      "msg": "Cluster vote is invalid"
    },
    {
      "code": 6600,
      "name": "SerializationFailed",
      "msg": "Borsh serialization failed"
    },
    {
      "code": 6601,
      "name": "DeserializationFailed",
      "msg": "Borsh deserialization failed"
    },
    {
      "code": 6602,
      "name": "HeapFull",
      "msg": "Heap is full"
    },
    {
      "code": 6603,
      "name": "InvalidSlot",
      "msg": "Current slot is before the last updated slot"
    },
    {
      "code": 6604,
      "name": "EpochIsInfinity",
      "msg": "Epoch is infinity"
    },
    {
      "code": 6605,
      "name": "InvalidTimestamp",
      "msg": "Timestamp is invalid"
    },
    {
      "code": 6606,
      "name": "InvalidEpoch",
      "msg": "Epoch is invalid"
    },
    {
      "code": 6607,
      "name": "EpochOverflow",
      "msg": "Epoch overflowed"
    }
  ],
  "types": [
    {
      "name": "AbortReason",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "InvalidMAC"
          },
          {
            "name": "ExpectedSentShare"
          },
          {
            "name": "ExpectedFieldElement"
          },
          {
            "name": "ExpectedAbort"
          },
          {
            "name": "MalformedData"
          },
          {
            "name": "ComputationFailed"
          },
          {
            "name": "InternalError"
          },
          {
            "name": "PreprocessingStreamError"
          },
          {
            "name": "DivisionByZero"
          },
          {
            "name": "NoSignature"
          },
          {
            "name": "InvalidSignature"
          },
          {
            "name": "PrimitiveError"
          },
          {
            "name": "QuadraticNonResidue"
          }
        ]
      }
    },
    {
      "name": "AcccountAccessInfo",
      "serialization": "bytemuck",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "inner",
            "type": "u16"
          }
        ]
      }
    },
    {
      "name": "Activation",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "activation_epoch",
            "docs": [
              "epoch for the cluster was activated. Epoch::INFINITY if inactive."
            ],
            "type": {
              "defined": {
                "name": "Epoch"
              }
            }
          },
          {
            "name": "deactivation_epoch",
            "docs": [
              "epoch for the cluster to be deactivated. Epoch::INFINITY if none."
            ],
            "type": {
              "defined": {
                "name": "Epoch"
              }
            }
          }
        ]
      }
    },
    {
      "name": "Argument",
      "docs": [
        "An argument passed into a [Computation], corresponding to [super::mxe::Parameter] of the",
        "[super::mxe::ComputationSignature]. An argument that corresponds to a Parameter type."
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "PlaintextBool",
            "fields": [
              "bool"
            ]
          },
          {
            "name": "PlaintextU8",
            "fields": [
              "u8"
            ]
          },
          {
            "name": "PlaintextU16",
            "fields": [
              "u16"
            ]
          },
          {
            "name": "PlaintextU32",
            "fields": [
              "u32"
            ]
          },
          {
            "name": "PlaintextU64",
            "fields": [
              "u64"
            ]
          },
          {
            "name": "PlaintextU128",
            "fields": [
              "u128"
            ]
          },
          {
            "name": "PlaintextFloat",
            "fields": [
              "f64"
            ]
          },
          {
            "name": "EncryptedBool",
            "fields": [
              {
                "array": [
                  "u8",
                  32
                ]
              }
            ]
          },
          {
            "name": "EncryptedU8",
            "fields": [
              {
                "array": [
                  "u8",
                  32
                ]
              }
            ]
          },
          {
            "name": "EncryptedU16",
            "fields": [
              {
                "array": [
                  "u8",
                  32
                ]
              }
            ]
          },
          {
            "name": "EncryptedU32",
            "fields": [
              {
                "array": [
                  "u8",
                  32
                ]
              }
            ]
          },
          {
            "name": "EncryptedU64",
            "fields": [
              {
                "array": [
                  "u8",
                  32
                ]
              }
            ]
          },
          {
            "name": "EncryptedU128",
            "fields": [
              {
                "array": [
                  "u8",
                  32
                ]
              }
            ]
          },
          {
            "name": "EncryptedFloat",
            "fields": [
              {
                "array": [
                  "u8",
                  32
                ]
              }
            ]
          },
          {
            "name": "ArcisPubkey",
            "fields": [
              {
                "array": [
                  "u8",
                  32
                ]
              }
            ]
          },
          {
            "name": "ArcisSignature",
            "fields": [
              {
                "array": [
                  "u8",
                  64
                ]
              }
            ]
          },
          {
            "name": "Account",
            "fields": [
              "pubkey",
              "u32",
              "u32"
            ]
          },
          {
            "name": "ManticoreAlgo",
            "fields": [
              "string"
            ]
          },
          {
            "name": "InputDataset",
            "fields": [
              "string"
            ]
          }
        ]
      }
    },
    {
      "name": "ArxNode",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "primary_staking_account",
            "type": "pubkey"
          },
          {
            "name": "metadata",
            "type": {
              "defined": {
                "name": "NodeMetadata"
              }
            }
          },
          {
            "name": "config",
            "type": {
              "defined": {
                "name": "ArxNodeConfig"
              }
            }
          },
          {
            "name": "cluster_memberships",
            "docs": [
              "The offsets of the cluster the node is a member of."
            ],
            "type": {
              "vec": "u32"
            }
          },
          {
            "name": "proposed_cluster_memberships",
            "docs": [
              "The offsets of the clusters the node has been proposed to be a member of."
            ],
            "type": {
              "vec": "u32"
            }
          },
          {
            "name": "cu_capacity_claim",
            "type": "u64"
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "reserved",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ArxNodeConfig",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "max_cluster_memberships",
            "type": "u32"
          },
          {
            "name": "authority",
            "docs": [
              "Admin key for node management operations"
            ],
            "type": "pubkey"
          },
          {
            "name": "callback_authority",
            "docs": [
              "Key used to sign computation callbacks - separated for operational security"
            ],
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "CallbackAccount",
      "docs": [
        "A callback account to be provided to a computation.",
        "We don't specify signer, since node operators can't sign."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "pubkey",
            "type": "pubkey"
          },
          {
            "name": "is_writable",
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "CallbackComputationEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "computation_offset",
            "type": "u64"
          },
          {
            "name": "mxe_program_id",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "CallbackInstruction",
      "docs": [
        "A custom callback instruction with its own program ID and discriminator."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "program_id",
            "type": "pubkey"
          },
          {
            "name": "discriminator",
            "type": "bytes"
          },
          {
            "name": "accounts",
            "type": {
              "vec": {
                "defined": {
                  "name": "CallbackAccount"
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "CircuitSource",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Local",
            "fields": [
              {
                "defined": {
                  "name": "LocalCircuitSource"
                }
              }
            ]
          },
          {
            "name": "OnChain",
            "fields": [
              {
                "defined": {
                  "name": "OnChainCircuitSource"
                }
              }
            ]
          },
          {
            "name": "OffChain",
            "fields": [
              {
                "defined": {
                  "name": "OffChainCircuitSource"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "name": "ClockAccount",
      "docs": [
        "An account storing the current network epoch"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "start_epoch",
            "type": {
              "defined": {
                "name": "Epoch"
              }
            }
          },
          {
            "name": "current_epoch",
            "type": {
              "defined": {
                "name": "Epoch"
              }
            }
          },
          {
            "name": "start_epoch_timestamp",
            "type": {
              "defined": {
                "name": "Timestamp"
              }
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "Cluster",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "max_size",
            "type": "u32"
          },
          {
            "name": "activation",
            "type": {
              "defined": {
                "name": "Activation"
              }
            }
          },
          {
            "name": "max_capacity",
            "type": "u64"
          },
          {
            "name": "cu_price",
            "docs": [
              "The price of compute units in this cluster."
            ],
            "type": "u64"
          },
          {
            "name": "cu_price_proposals",
            "docs": [
              "The proposals for the cu price proposals in the next epoch.",
              "Index 0 is always the current price, we allow `MAX_FEE_PROPS` at most."
            ],
            "type": {
              "array": [
                "u64",
                32
              ]
            }
          },
          {
            "name": "last_updated_epoch",
            "docs": [
              "The epoch this cluster was last updated.",
              "Used to determine if the cluster needs to be updated."
            ],
            "type": {
              "defined": {
                "name": "Epoch"
              }
            }
          },
          {
            "name": "mxes",
            "docs": [
              "The MXE's that this cluster is assigned to. Referred to by the MXE's program id."
            ],
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "name": "nodes",
            "type": {
              "vec": {
                "defined": {
                  "name": "NodeRef"
                }
              }
            }
          },
          {
            "name": "pending_nodes",
            "type": {
              "vec": {
                "defined": {
                  "name": "NodeRef"
                }
              }
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ComputationAccount",
      "docs": [
        "A computation execution call to a [super::mxe::ComputationDefinitionAccount]."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "payer",
            "type": "pubkey"
          },
          {
            "name": "cluster_index",
            "docs": [
              "The MXE's cluster to be used for execution.",
              "",
              "# Notes",
              "",
              "- [None] represents the default cluster,",
              "- [Some] specifies the index of the fallback cluster."
            ],
            "type": {
              "option": "u16"
            }
          },
          {
            "name": "computation_definition_offset",
            "docs": [
              "The offset of the corresponding [super::mxe::ComputationDefinitionAccount]."
            ],
            "type": "u32"
          },
          {
            "name": "execution_fee",
            "docs": [
              "The execution fee for the execution."
            ],
            "type": {
              "defined": {
                "name": "ExecutionFee"
              }
            }
          },
          {
            "name": "slot",
            "type": "u64"
          },
          {
            "name": "slot_counter",
            "type": "u16"
          },
          {
            "name": "status",
            "type": {
              "defined": {
                "name": "ComputationStatus"
              }
            }
          },
          {
            "name": "arguments",
            "docs": [
              "The arguments passed to the computation. If it is a manticore computation, we expect the",
              "first element to be of type ManticoreAlgo"
            ],
            "type": {
              "vec": {
                "defined": {
                  "name": "Argument"
                }
              }
            }
          },
          {
            "name": "callback_url",
            "type": {
              "option": "string"
            }
          },
          {
            "name": "custom_callback_instructions",
            "type": {
              "vec": {
                "defined": {
                  "name": "CallbackInstruction"
                }
              }
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ComputationDefinitionAccount",
      "docs": [
        "An account representing a [ComputationDefinition] in a MXE."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "finalization_authority",
            "docs": [
              "The authority that is allowed to finalize the computation. If set to None, anyone can."
            ],
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "finalize_during_callback",
            "docs": [
              "Whether to we need a separate callback and finalize instruction or if we can do it in one."
            ],
            "type": "bool"
          },
          {
            "name": "cu_amount",
            "docs": [
              "The amount of CUs this computation will use."
            ],
            "type": "u64"
          },
          {
            "name": "definition",
            "docs": [
              "The interface of the computation to execute."
            ],
            "type": {
              "defined": {
                "name": "ComputationDefinitionMeta"
              }
            }
          },
          {
            "name": "circuit_source",
            "docs": [
              "Where to fetch the actual raw circuit to execute."
            ],
            "type": {
              "defined": {
                "name": "CircuitSource"
              }
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ComputationDefinitionMeta",
      "docs": [
        "A computation definition for execution in a MXE."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "circuit_len",
            "type": "u32"
          },
          {
            "name": "signature",
            "type": {
              "defined": {
                "name": "ComputationSignature"
              }
            }
          }
        ]
      }
    },
    {
      "name": "ComputationDefinitionRaw",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "compiled_circuit",
            "docs": [
              "The length here is meaningless."
            ],
            "type": {
              "array": [
                "u8",
                0
              ]
            }
          }
        ]
      }
    },
    {
      "name": "ComputationReference",
      "serialization": "bytemuck",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "computation_offset",
            "type": "u64"
          },
          {
            "name": "priority_fee",
            "type": "u64"
          },
          {
            "name": "computation_definition_offset",
            "type": "u32"
          },
          {
            "name": "accs",
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "AcccountAccessInfo"
                  }
                },
                10
              ]
            }
          }
        ]
      }
    },
    {
      "name": "ComputationSignature",
      "docs": [
        "The signature of a computation defined in a [ComputationDefinition]."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "parameters",
            "docs": [
              "The input parameters of the computation."
            ],
            "type": {
              "vec": {
                "defined": {
                  "name": "Parameter"
                }
              }
            }
          },
          {
            "name": "outputs",
            "docs": [
              "The output(s) of the computation."
            ],
            "type": {
              "vec": {
                "defined": {
                  "name": "Output"
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "ComputationStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Queued"
          },
          {
            "name": "Executed"
          },
          {
            "name": "Finalized"
          }
        ]
      }
    },
    {
      "name": "Epoch",
      "docs": [
        "The network epoch"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          "u64"
        ]
      }
    },
    {
      "name": "ExecutingPool",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "generics": [
        {
          "kind": "const",
          "name": "MAX_PARRALLEL_COMPUTATIONS",
          "type": "usize"
        }
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "comp_status",
            "type": {
              "array": [
                "u8",
                13
              ]
            }
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                2
              ]
            }
          },
          {
            "name": "counter",
            "type": "u64"
          },
          {
            "name": "execpool_index",
            "type": {
              "array": [
                "u64",
                {
                  "generic": "MAX_PARRALLEL_COMPUTATIONS"
                }
              ]
            }
          },
          {
            "name": "currently_executing",
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "ComputationReference"
                  }
                },
                {
                  "generic": "MAX_PARRALLEL_COMPUTATIONS"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "ExecutionFailure",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Serialization"
          },
          {
            "name": "Router"
          },
          {
            "name": "Circuit"
          },
          {
            "name": "Inputs"
          },
          {
            "name": "ProtocolInit"
          },
          {
            "name": "ProtocolRun"
          },
          {
            "name": "Abort",
            "fields": [
              {
                "defined": {
                  "name": "AbortReason"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "name": "ExecutionFee",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "base_fee",
            "docs": [
              "The base fee for the computation."
            ],
            "type": "u64"
          },
          {
            "name": "priority_fee",
            "docs": [
              "The additional fee to enforce priortized execution in the mempool."
            ],
            "type": "u64"
          },
          {
            "name": "input_delivery_fee",
            "docs": [
              "A fee for data relaying used with [super::mxe::DataProvisioning::Protected] data",
              "provisioning."
            ],
            "type": "u64"
          },
          {
            "name": "output_delivery_fee",
            "docs": [
              "A fee for relayer based (unverifiable) off-chain output delivery."
            ],
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "ExecutionStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Success"
          },
          {
            "name": "Failure",
            "fields": [
              {
                "defined": {
                  "name": "ExecutionFailure"
                }
              },
              {
                "array": [
                  "u8",
                  32
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "name": "FeePool",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "FinalizeComputationEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "computation_offset",
            "type": "u64"
          },
          {
            "name": "mxe_program_id",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "InitComputationEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "computation_offset",
            "type": "u64"
          },
          {
            "name": "mxe_program_id",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "LargeExecPool",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "transparent"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "inner",
            "type": {
              "defined": {
                "name": "ExecutingPool",
                "generics": [
                  {
                    "kind": "const",
                    "value": "100"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "name": "LargeMempool",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "transparent"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "inner",
            "type": {
              "defined": {
                "name": "LargeMempoolInner"
              }
            }
          }
        ]
      }
    },
    {
      "name": "LargeMempoolInner",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "last_updated_slot",
            "type": "u64"
          },
          {
            "name": "slot_counter",
            "type": "u16"
          },
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                5
              ]
            }
          },
          {
            "name": "computations",
            "type": {
              "defined": {
                "name": "LargeMempoolInnerBuffer"
              }
            }
          }
        ]
      }
    },
    {
      "name": "LargeMempoolInnerBuffer",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "elems",
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "LargeMempoolInnerBufferHeap"
                  }
                },
                180
              ]
            }
          },
          {
            "name": "valid_bits",
            "docs": [
              "Bit array tracking which slots are valid (1 = valid, 0 = stale)",
              "1 bit per slot, packed into bytes. For $buffer_length=180, this is 23 bytes."
            ],
            "type": {
              "array": [
                "u8",
                23
              ]
            }
          },
          {
            "name": "start_index",
            "type": "u8"
          },
          {
            "name": "length",
            "type": "u8"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                7
              ]
            }
          }
        ]
      }
    },
    {
      "name": "LargeMempoolInnerBufferHeap",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "entries",
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "ComputationReference"
                  }
                },
                100
              ]
            }
          },
          {
            "name": "count",
            "type": "u16"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                6
              ]
            }
          }
        ]
      }
    },
    {
      "name": "LocalCircuitSource",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "MxeKeygen"
          }
        ]
      }
    },
    {
      "name": "MXEAccount",
      "docs": [
        "A MPC Execution Environment."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The management authority of the MXE."
            ],
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "cluster",
            "docs": [
              "The cluster executing the MXE."
            ],
            "type": {
              "option": "u32"
            }
          },
          {
            "name": "x25519_pubkey",
            "docs": [
              "The x25519 pubkey (256 bits curve25519), used for encrypted data."
            ],
            "type": {
              "defined": {
                "name": "X25519Pubkey"
              }
            }
          },
          {
            "name": "fallback_clusters",
            "docs": [
              "Fallback clusters that can execute this MXE as an alternative to the",
              "[MXEAccount::cluster]. There can be a maximum of [MAX_FALLBACK_CLUSTERS]",
              "fallback clusters."
            ],
            "type": {
              "vec": "u32"
            }
          },
          {
            "name": "rejected_clusters",
            "docs": [
              "The clusters that have rejected this MXE."
            ],
            "type": {
              "vec": "u32"
            }
          },
          {
            "name": "computation_definitions",
            "docs": [
              "The offsets of all [ComputationDefinitionAccount]s of this MXE."
            ],
            "type": {
              "vec": "u32"
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "MediumExecPool",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "transparent"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "inner",
            "type": {
              "defined": {
                "name": "ExecutingPool",
                "generics": [
                  {
                    "kind": "const",
                    "value": "10"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "name": "MediumMempool",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "transparent"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "inner",
            "type": {
              "defined": {
                "name": "MediumMempoolInner"
              }
            }
          }
        ]
      }
    },
    {
      "name": "MediumMempoolInner",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "last_updated_slot",
            "type": "u64"
          },
          {
            "name": "slot_counter",
            "type": "u16"
          },
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                5
              ]
            }
          },
          {
            "name": "computations",
            "type": {
              "defined": {
                "name": "MediumMempoolInnerBuffer"
              }
            }
          }
        ]
      }
    },
    {
      "name": "MediumMempoolInnerBuffer",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "elems",
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "MediumMempoolInnerBufferHeap"
                  }
                },
                180
              ]
            }
          },
          {
            "name": "valid_bits",
            "docs": [
              "Bit array tracking which slots are valid (1 = valid, 0 = stale)",
              "1 bit per slot, packed into bytes. For $buffer_length=180, this is 23 bytes."
            ],
            "type": {
              "array": [
                "u8",
                23
              ]
            }
          },
          {
            "name": "start_index",
            "type": "u8"
          },
          {
            "name": "length",
            "type": "u8"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                7
              ]
            }
          }
        ]
      }
    },
    {
      "name": "MediumMempoolInnerBufferHeap",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "entries",
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "ComputationReference"
                  }
                },
                10
              ]
            }
          },
          {
            "name": "count",
            "type": "u16"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                6
              ]
            }
          }
        ]
      }
    },
    {
      "name": "MempoolSize",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Tiny"
          },
          {
            "name": "Small"
          },
          {
            "name": "Medium"
          },
          {
            "name": "Large"
          }
        ]
      }
    },
    {
      "name": "NodeMetadata",
      "docs": [
        "location as [ISO 3166-1 alpha-2](https://www.iso.org/iso-3166-country-codes.html) country code"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "ip",
            "docs": [
              "[Ipv4Addr], represented by it's 4 octects"
            ],
            "type": {
              "array": [
                "u8",
                4
              ]
            }
          },
          {
            "name": "peer_id",
            "docs": [
              "Needed for MPC protocol"
            ],
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "location",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "NodeRef",
      "docs": [
        "A reference to a node in the cluster.",
        "The offset is to derive the Node Account.",
        "The current_total_rewards is the total rewards the node has received so far in the current",
        "epoch."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "offset",
            "type": "u32"
          },
          {
            "name": "current_total_rewards",
            "docs": [
              "Current total rewards the node has received in the current epoch in lamports."
            ],
            "type": "u64"
          },
          {
            "name": "vote",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "OffChainCircuitSource",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "source",
            "type": "string"
          },
          {
            "name": "hash",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "OnChainCircuitSource",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "is_completed",
            "docs": [
              "Specifies if the circuit for this computation has been fully uploaded,",
              "as this can take multiple transactions due to the circuit size."
            ],
            "type": "bool"
          },
          {
            "name": "upload_auth",
            "docs": [
              "The authority that is allowed to upload the circuit."
            ],
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "Operator",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "node_offsets",
            "type": {
              "vec": "u32"
            }
          },
          {
            "name": "meta",
            "type": {
              "defined": {
                "name": "OperatorMeta"
              }
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "OperatorMeta",
      "docs": [
        "location as [ISO 3166-1 alpha-2](https://www.iso.org/iso-3166-country-codes.html) country code"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "url",
            "docs": [
              "URL should point to a JSON containing the following fields:",
              "- `name`: String, the name of the operator",
              "- `description`: String, a description of the operator",
              "- `icon`: String, a URL to an icon representing the operator",
              "- `url`: String, a URL to the operator's website"
            ],
            "type": "string"
          },
          {
            "name": "location",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "Output",
      "docs": [
        "An output of a computation.",
        "We currently don't support encrypted outputs yet since encrypted values are passed via",
        "data objects."
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "PlaintextBool"
          },
          {
            "name": "PlaintextU8"
          },
          {
            "name": "PlaintextU16"
          },
          {
            "name": "PlaintextU32"
          },
          {
            "name": "PlaintextU64"
          },
          {
            "name": "PlaintextU128"
          },
          {
            "name": "Ciphertext"
          },
          {
            "name": "ArcisPubkey"
          },
          {
            "name": "PlaintextFloat"
          }
        ]
      }
    },
    {
      "name": "Parameter",
      "docs": [
        "A parameter of a computation.",
        "We differentiate between plaintext and encrypted parameters and data objects.",
        "Plaintext parameters are directly provided as their value.",
        "Encrypted parameters are provided as an offchain reference to the data.",
        "Data objects are provided as a reference to the data object account."
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "PlaintextBool"
          },
          {
            "name": "PlaintextU8"
          },
          {
            "name": "PlaintextU16"
          },
          {
            "name": "PlaintextU32"
          },
          {
            "name": "PlaintextU64"
          },
          {
            "name": "PlaintextU128"
          },
          {
            "name": "Ciphertext"
          },
          {
            "name": "ArcisPubkey"
          },
          {
            "name": "ArcisSignature"
          },
          {
            "name": "PlaintextFloat"
          },
          {
            "name": "ManticoreAlgo"
          },
          {
            "name": "InputDataset"
          }
        ]
      }
    },
    {
      "name": "QueueComputationEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "computation_offset",
            "type": "u64"
          },
          {
            "name": "mxe_program_id",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "SmallExecPool",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "transparent"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "inner",
            "type": {
              "defined": {
                "name": "ExecutingPool",
                "generics": [
                  {
                    "kind": "const",
                    "value": "3"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "name": "SmallMempool",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "transparent"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "inner",
            "type": {
              "defined": {
                "name": "SmallMempoolInner"
              }
            }
          }
        ]
      }
    },
    {
      "name": "SmallMempoolInner",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "last_updated_slot",
            "type": "u64"
          },
          {
            "name": "slot_counter",
            "type": "u16"
          },
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                5
              ]
            }
          },
          {
            "name": "computations",
            "type": {
              "defined": {
                "name": "SmallMempoolInnerBuffer"
              }
            }
          }
        ]
      }
    },
    {
      "name": "SmallMempoolInnerBuffer",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "elems",
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "SmallMempoolInnerBufferHeap"
                  }
                },
                180
              ]
            }
          },
          {
            "name": "valid_bits",
            "docs": [
              "Bit array tracking which slots are valid (1 = valid, 0 = stale)",
              "1 bit per slot, packed into bytes. For $buffer_length=180, this is 23 bytes."
            ],
            "type": {
              "array": [
                "u8",
                23
              ]
            }
          },
          {
            "name": "start_index",
            "type": "u8"
          },
          {
            "name": "length",
            "type": "u8"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                7
              ]
            }
          }
        ]
      }
    },
    {
      "name": "SmallMempoolInnerBufferHeap",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "entries",
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "ComputationReference"
                  }
                },
                3
              ]
            }
          },
          {
            "name": "count",
            "type": "u16"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                6
              ]
            }
          }
        ]
      }
    },
    {
      "name": "Timestamp",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "timestamp",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "TinyExecPool",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "transparent"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "inner",
            "type": {
              "defined": {
                "name": "ExecutingPool",
                "generics": [
                  {
                    "kind": "const",
                    "value": "1"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "name": "TinyMempool",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "transparent"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "inner",
            "type": {
              "defined": {
                "name": "TinyMempoolInner"
              }
            }
          }
        ]
      }
    },
    {
      "name": "TinyMempoolInner",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "last_updated_slot",
            "type": "u64"
          },
          {
            "name": "slot_counter",
            "type": "u16"
          },
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                5
              ]
            }
          },
          {
            "name": "computations",
            "type": {
              "defined": {
                "name": "TinyMempoolInnerBuffer"
              }
            }
          }
        ]
      }
    },
    {
      "name": "TinyMempoolInnerBuffer",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "elems",
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "TinyMempoolInnerBufferHeap"
                  }
                },
                180
              ]
            }
          },
          {
            "name": "valid_bits",
            "docs": [
              "Bit array tracking which slots are valid (1 = valid, 0 = stale)",
              "1 bit per slot, packed into bytes. For $buffer_length=180, this is 23 bytes."
            ],
            "type": {
              "array": [
                "u8",
                23
              ]
            }
          },
          {
            "name": "start_index",
            "type": "u8"
          },
          {
            "name": "length",
            "type": "u8"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                7
              ]
            }
          }
        ]
      }
    },
    {
      "name": "TinyMempoolInnerBufferHeap",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "entries",
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "ComputationReference"
                  }
                },
                1
              ]
            }
          },
          {
            "name": "count",
            "type": "u16"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u8",
                6
              ]
            }
          }
        ]
      }
    },
    {
      "name": "X25519Pubkey",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Set",
            "fields": [
              {
                "array": [
                  "u8",
                  32
                ]
              }
            ]
          },
          {
            "name": "Unset",
            "fields": [
              {
                "array": [
                  "u8",
                  32
                ]
              },
              {
                "vec": "bool"
              }
            ]
          }
        ]
      }
    }
  ]
}